// Generated by dts-bundle-generator v6.13.0

export declare function isEmptyText(value: TextValue): boolean;
export declare function toTextValue(value: TextConvertible): TextValue;
export type TextConvertible = TextValue | string;
export type TrimDirection = "both" | "left" | "right";
export type Pair<A, B> = [A, B];
export declare class Value {}
export declare class TextValue extends Value {
  constructor();
  add(valueB: TextConvertible): ConcatOperation;
  trim(direction?: TrimDirection): TrimOperation;
  slice(start: number, end: number): SliceOperation;
  replace(
    target: TextConvertible,
    replacement: TextConvertible
  ): ReplaceOperation;
  replaceAll(
    ...replacements: Pair<TextConvertible, TextConvertible>[]
  ): ReplaceAllOperation;
  remove(target: TextConvertible): RemoveOperation;
  toLower(): ToLowerOperation;
  toUpper(): ToUpperOperation;
  extractOne(pattern: TextConvertible): ExtractOneOperation;
  patternReplace(
    pattern: TextConvertible,
    replacement: TextConvertible
  ): PatternReplaceOperation;
  patternReplaceAll(
    ...replacements: Pair<TextConvertible, TextConvertible>[]
  ): PatternReplaceAllOperation;
}
export declare class TextLiteral extends TextValue {
  value: string;
  constructor(value: string);
}
export declare class TextColumn extends TextValue {
  tableName: string;
  columnName: string;
  constructor(tableName: string, columnName: string);
}
export declare class ConcatOperation extends TextValue {
  valueA: TextValue;
  valueB: TextValue;
  constructor(valueA: TextValue, valueB: TextValue);
}
export declare class TrimOperation extends TextValue {
  value: TextValue;
  direction: TrimDirection;
  constructor(value: TextValue, direction: TrimDirection);
}
export declare class SliceOperation extends TextValue {
  value: TextValue;
  start: number;
  end: number;
  constructor(value: TextValue, start: number, end: number);
}
export declare class ReplaceOperation extends TextValue {
  value: TextValue;
  target: TextValue;
  replacement: TextValue;
  constructor(value: TextValue, target: TextValue, replacement: TextValue);
}
export declare class ReplaceAllOperation extends TextValue {
  value: TextValue;
  replacements: Pair<TextValue, TextValue>[];
  constructor(value: TextValue, replacements: Pair<TextValue, TextValue>[]);
}
export declare class RemoveOperation extends TextValue {
  value: TextValue;
  target: TextValue;
  constructor(value: TextValue, target: TextValue);
}
export declare class ToLowerOperation extends TextValue {
  value: TextValue;
  constructor(value: TextValue);
}
export declare class ToUpperOperation extends TextValue {
  value: TextValue;
  constructor(value: TextValue);
}
export declare class ExtractOneOperation extends TextValue {
  value: TextValue;
  pattern: TextValue;
  constructor(value: TextValue, pattern: TextValue);
}
export declare class PatternReplaceOperation extends TextValue {
  value: TextValue;
  pattern: TextValue;
  replacement: TextValue;
  constructor(value: TextValue, pattern: TextValue, replacement: TextValue);
}
export declare class PatternReplaceAllOperation extends TextValue {
  value: TextValue;
  replacements: Pair<TextValue, TextValue>[];
  constructor(value: TextValue, replacements: Pair<TextValue, TextValue>[]);
}
export declare function text(value: string): TextLiteral;
export declare function text(
  template: TemplateStringsArray,
  ...params: TextValue[]
): ConcatOperation;
export declare function toIntegerValue(value: IntegerConvertible): IntegerValue;
export type IntegerConvertible = IntegerValue | number;
export declare class IntegerValue extends Value {
  constructor();
}
export declare class IntegerLiteral extends IntegerValue {
  value: number;
  constructor(value: number);
}
export declare class IntegerColumn extends IntegerValue {
  tableName: string;
  columnName: string;
  constructor(tableName: string, columnName: string);
}
export interface InternalTableBase {
  columns: Record<string, "TEXT" | "INTEGER">;
}
export interface InternalDatabase {
  tables: Record<string, InternalTableBase>;
}
export declare function createDatabase<T>(internal: InternalDatabase): T;

export {};
